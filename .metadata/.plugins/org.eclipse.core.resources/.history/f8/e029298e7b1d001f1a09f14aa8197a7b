package com.multi.spring.b_message.config;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.PropertySource;

import com.multi.spring.b_message.Beverage;
import com.multi.spring.b_message.Bread;
import com.multi.spring.b_message.Product;

@Configuration
@PropertySource("product-info.properties")
public class ContextConfiguration {

	// 치환자 문법 (placeholder) 을 활용해서 프로퍼티즈 파일의 키 값으로 벨류를 얻어올 수 있다.
	@Value("${bread.carpbread.name:붕어빵}") // :붕어빵 초기값 지정
	private String carpBreadName;

	@Value("${bread.carpbread.name:붕어빵}") // :붕어빵 초기값 지정
	private String carpBreadName2;

	@Value("${bread.carpbread.name:붕어빵}") // :붕어빵 초기값 지정
	private String carpBreadName3;

	@Value("${bread.carpbread.price:0}") // :0 초기값 지정
	private int carpBreadPrice;

	
	
	private String milkName;
	private int milkPrice;
	private int milkCapacity;
	
	
	
	
	@Bean
	public Product crapBread() {

		return new Bread(carpBreadName, carpBreadPrice, new java.util.Date());

	}
	
	
	@Bean
	public Product milk() {
		
		return new Beverage(milkName, milkPrice, milkCapacity);
	}
	
	
	

}
